package com.example.chenjutsu.calendar1;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.example.chenjutsu.calendar1.EVENT;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EVENT.
*/
public class EVENTDao extends AbstractDao<EVENT, Long> {

    public static final String TABLENAME = "EVENT";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Year = new Property(1, Integer.class, "year", false, "YEAR");
        public final static Property Month = new Property(2, Integer.class, "month", false, "MONTH");
        public final static Property Day = new Property(3, Integer.class, "day", false, "DAY");
        public final static Property Event = new Property(4, String.class, "event", false, "EVENT");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
        public final static Property Display = new Property(6, Boolean.class, "display", false, "DISPLAY");
    };


    public EVENTDao(DaoConfig config) {
        super(config);
    }
    
    public EVENTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'EVENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'YEAR' INTEGER," + // 1: year
                "'MONTH' INTEGER," + // 2: month
                "'DAY' INTEGER," + // 3: day
                "'EVENT' TEXT," + // 4: event
                "'DATE' TEXT," + // 5: date
                "'DISPLAY' INTEGER);"; // 6: display
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EVENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EVENT entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer year = entity.getYear();
        if (year != null) {
            stmt.bindLong(2, year);
        }
 
        Integer month = entity.getMonth();
        if (month != null) {
            stmt.bindLong(3, month);
        }
 
        Integer day = entity.getDay();
        if (day != null) {
            stmt.bindLong(4, day);
        }
 
        String event = entity.getEvent();
        if (event != null) {
            stmt.bindString(5, event);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        Boolean display = entity.getDisplay();
        if (display != null) {
            stmt.bindLong(7, display ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EVENT readEntity(Cursor cursor, int offset) {
        EVENT entity = new EVENT( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // year
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // month
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // day
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // event
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // date
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // display
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EVENT entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setYear(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setMonth(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDay(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setEvent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDisplay(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected Long updateKeyAfterInsert(EVENT entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EVENT entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
